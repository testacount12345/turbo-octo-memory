#include "clientSock.h"

uint8_t allochook[] = { 0xB8, 0x00, 0x00, 0x00, 0x00, 0xE9, 0xB2, 0x01, 0x69, 0xFD, 0x8B, 0x84, 0x24, 0xC0, 
                        0x00, 0x00, 0x00, 0xEB, 0xF2, 0x8B, 0x84, 0x24, 0xC8, 0x00, 0x00, 0x00, 0xEB, 0xE9,
                        0x8B, 0x84, 0x24, 0xC0, 0x00, 0x00, 0x00, 0x3D, 0x3B, 0x37, 0x00, 0x00, 0x74, 0xD6,
                        0x3D, 0x3C, 0x04, 0x00, 0x00, 0x74, 0xD9, 0x3D, 0xD4, 0x05, 0x00, 0x00, 0x74, 0xD2, 
                        0x3D, 0x01, 0x06, 0x00, 0x00, 0x74, 0xC1, 0x3D, 0xCE, 0x08, 0x00, 0x00, 0x74, 0xC4, 
                        0x3D, 0x6E, 0x0C, 0x00, 0x00, 0x74, 0xBD, 0x3D, 0xA0, 0x06, 0x00, 0x00, 0x74, 0xB6, 
                        0x3D, 0xD4, 0x07, 0x00, 0x00, 0x74, 0xAF, 0x3D, 0xF2, 0x08, 0x00, 0x00, 0x74, 0xA8, 
                        0x3D, 0x32, 0x0F, 0x00, 0x00, 0x74, 0xA1, 0x3D, 0x34, 0x0F, 0x00, 0x00, 0x74, 0x9A, 
                        0x3D, 0x72, 0x0F, 0x00, 0x00, 0x74, 0x93, 0x83, 0xF8, 0x00, 0x72, 0x8E, 0x3D, 0x00, 
                        0x1F, 0x00, 0x00, 0x77, 0x87, 0xEB, 0x8E, 0x83, 0xFE, 0x00, 0x75, 0x92, 0x8B, 0x84, 
                        0x24, 0xC0, 0x00, 0x00, 0x00, 0x83, 0xF8, 0x74, 0x0F, 0x84, 0x66, 0xFF, 0xFF, 0xFF, 
                        0x3D, 0x96, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x5B, 0xFF, 0xFF, 0xFF, 0x83, 0xF8, 0x34, 
                        0x0F, 0x84, 0x52, 0xFF, 0xFF, 0xFF, 0x3D, 0xB8, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x47, 
                        0xFF, 0xFF, 0xFF, 0x3D, 0xA8, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x3C, 0xFF, 0xFF, 0xFF, 
                        0x3D, 0x06, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x31, 0xFF, 0xFF, 0xFF, 0x3D, 0x24, 0x01, 
                        0x00, 0x00, 0x0F, 0x84, 0x26, 0xFF, 0xFF, 0xFF, 0x3D, 0x95, 0x00, 0x00, 0x00, 0x0F, 
                        0x84, 0x1B, 0xFF, 0xFF, 0xFF, 0x3D, 0xB1, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x10, 0xFF, 
                        0xFF, 0xFF, 0x83, 0xF8, 0x24, 0x0F, 0x84, 0x07, 0xFF, 0xFF, 0xFF, 0x83, 0xF8, 0x45, 
                        0x0F, 0x84, 0xFE, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x53, 0x0F, 0x84, 0xF5, 0xFE, 0xFF, 
                        0xFF, 0x83, 0xF8, 0x3E, 0x0F, 0x84, 0xEC, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x28, 0x0F, 
                        0x84, 0xE3, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x4B, 0x0F, 0x84, 0xDA, 0xFE, 0xFF, 0xFF, 
                        0x83, 0xF8, 0x3C, 0x0F, 0x84, 0xD1, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x4D, 0x0F, 0x84, 
                        0xC8, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x6F, 0x0F, 0x84, 0xBF, 0xFE, 0xFF, 0xFF, 0x3D, 
                        0x21, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xB4, 0xFE, 0xFF, 0xFF, 0x3D, 0x0C, 0x01, 0x00, 
                        0x00, 0x0F, 0x84, 0xA9, 0xFE, 0xFF, 0xFF, 0x3D, 0xF3, 0x01, 0x00, 0x00, 0x0F, 0x84, 
                        0x9E, 0xFE, 0xFF, 0xFF, 0x3D, 0x54, 0x02, 0x00, 0x00, 0x0F, 0x84, 0x93, 0xFE, 0xFF, 
                        0xFF, 0x3D, 0x82, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x88, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 
                        0x37, 0x0F, 0x84, 0x7F, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x3A, 0x0F, 0x84, 0x76, 0xFE, 
                        0xFF, 0xFF, 0x83, 0xF8, 0x75, 0x0F, 0x84, 0x6D, 0xFE, 0xFF, 0xFF, 0x3D, 0xD6, 0x00, 
                        0x00, 0x00, 0x0F, 0x84, 0x62, 0xFE, 0xFF, 0xFF, 0x3D, 0xA0, 0x00, 0x00, 0x00, 0x0F, 
                        0x84, 0x57, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x7D, 0x0F, 0x84, 0x4E, 0xFE, 0xFF, 0xFF, 
                        0x83, 0xF8, 0x60, 0x0F, 0x84, 0x45, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 0x30, 0x0F, 0x84, 
                        0x3C, 0xFE, 0xFF, 0xFF, 0x3D, 0xBF, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x31, 0xFE, 0xFF, 
                        0xFF, 0x3D, 0xF5, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x26, 0xFE, 0xFF, 0xFF, 0x83, 0xF8, 
                        0x48, 0x0F, 0x84, 0x1D, 0xFE, 0xFF, 0xFF, 0x3D, 0xBD, 0x00, 0x00, 0x00, 0x0F, 0x84, 
                        0x12, 0xFE, 0xFF, 0xFF, 0x3D, 0xC8, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x07, 0xFE, 0xFF, 
                        0xFF, 0x3D, 0xE9, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xFC, 0xFD, 0xFF, 0xFF, 0x3D, 0x1D, 
                        0x02, 0x00, 0x00, 0x0F, 0x84, 0xF1, 0xFD, 0xFF, 0xFF, 0x3D, 0x3D, 0x02, 0x00, 0x00, 
                        0x0F, 0x84, 0xE6, 0xFD, 0xFF, 0xFF, 0x3D, 0xFC, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xDB, 
                        0xFD, 0xFF, 0xFF, 0x3D, 0x0A, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xD0, 0xFD, 0xFF, 0xFF, 
                        0x83, 0xF8, 0x6A, 0x0F, 0x84, 0xC7, 0xFD, 0xFF, 0xFF, 0x3D, 0x81, 0x00, 0x00, 0x00, 
                        0x0F, 0x84, 0xBC, 0xFD, 0xFF, 0xFF, 0x3D, 0x87, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xB1, 
                        0xFD, 0xFF, 0xFF, 0x3D, 0xA1, 0x00, 0x00, 0x00, 0x0F, 0x84, 0xA6, 0xFD, 0xFF, 0xFF, 
                        0x3D, 0xA2, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x9B, 0xFD, 0xFF, 0xFF, 0x83, 0xF8, 0x6A, 
                        0x0F, 0x84, 0x92, 0xFD, 0xFF, 0xFF, 0x3D, 0x81, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x87, 
                        0xFD, 0xFF, 0xFF, 0x3D, 0x87, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x7C, 0xFD, 0xFF, 0xFF, 
                        0x3D, 0xFB, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x71, 0xFD, 0xFF, 0xFF, 0x3D, 0xE7, 0x01, 
                        0x00, 0x00, 0x0F, 0x84, 0x66, 0xFD, 0xFF, 0xFF, 0x3D, 0x8A, 0x02, 0x00, 0x00, 0x0F, 
                        0x84, 0x5B, 0xFD, 0xFF, 0xFF, 0x3D, 0xE2, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x50, 0xFD, 
                        0xFF, 0xFF, 0x3D, 0x6F, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x45, 0xFD, 0xFF, 0xFF, 0x3D, 
                        0xBC, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x3A, 0xFD, 0xFF, 0xFF, 0x3D, 0x7E, 0x03, 0x00, 
                        0x00, 0x0F, 0x84, 0x2F, 0xFD, 0xFF, 0xFF, 0x3D, 0x20, 0x04, 0x00, 0x00, 0x0F, 0x84, 
                        0x24, 0xFD, 0xFF, 0xFF, 0x83, 0xF8, 0x1A, 0x0F, 0x84, 0x1B, 0xFD, 0xFF, 0xFF, 0x3D, 
                        0xAD, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x10, 0xFD, 0xFF, 0xFF, 0x3D, 0x7C, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x05, 0xFD, 0xFF, 0xFF, 0x3D, 0x8C, 0x06, 0x00, 0x00, 0x0F, 0x84, 0xFA, 0xFC, 0xFF, 0xFF, 0x3D, 0xD1, 0x0C, 0x00, 0x00, 0x0F, 0x84, 0xEF, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x1A, 0x0F, 0x84, 0xE6, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x5F, 0x0F, 0x84, 0xDD, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x65, 0x0F, 0x84, 0xD4, 0xFC, 0xFF, 0xFF, 0x3D, 0xF8, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xC9, 0xFC, 0xFF, 0xFF, 0x3D, 0xAB, 0x04, 0x00, 0x00, 0x0F, 0x84, 0xBE, 0xFC, 0xFF, 0xFF, 0x3D, 0x16, 0x06, 0x00, 0x00, 0x0F, 0x84, 0xB3, 0xFC, 0xFF, 0xFF, 0x3D, 0x29, 0x09, 0x00, 0x00, 0x0F, 0x84, 0xA8, 0xFC, 0xFF, 0xFF, 0x3D, 0xD6, 0x09, 0x00, 0x00, 0x0F, 0x84, 0x9D, 0xFC, 0xFF, 0xFF, 0x3D, 0x0E, 0x0E, 0x00, 0x00, 0x0F, 0x84, 0x92, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x40, 0x0F, 0x84, 0x89, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x58, 0x0F, 0x84, 0x80, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x5A, 0x0F, 0x84, 0x77, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x64, 0x0F, 0x84, 0x6E, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x69, 0x0F, 0x84, 0x65, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x6C, 0x0F, 0x84, 0x5C, 0xFC, 0xFF, 0xFF, 0x83, 0xF8, 0x78, 0x0F, 0x84, 0x53, 0xFC, 0xFF, 0xFF, 0x3D, 0x91, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x48, 0xFC, 0xFF, 0xFF, 0x3D, 0x98, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x3D, 0xFC, 0xFF, 0xFF, 0x3D, 0xD8, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x32, 0xFC, 0xFF, 0xFF, 0x3D, 0xDA, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x27, 0xFC, 0xFF, 0xFF, 0x3D, 0xF7, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x1C, 0xFC, 0xFF, 0xFF, 0x3D, 0x00, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x11, 0xFC, 0xFF, 0xFF, 0x3D, 0x13, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x06, 0xFC, 0xFF, 0xFF, 0x3D, 0x1A, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xFB, 0xFB, 0xFF, 0xFF, 0x3D, 0x1B, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xF0, 0xFB, 0xFF, 0xFF, 0x3D, 0x58, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xE5, 0xFB, 0xFF, 0xFF, 0x3D, 0x5F, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xDA, 0xFB, 0xFF, 0xFF, 0x3D, 0x74, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xCF, 0xFB, 0xFF, 0xFF, 0x3D, 0x77, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xC4, 0xFB, 0xFF, 0xFF, 0x3D, 0xB8, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xB9, 0xFB, 0xFF, 0xFF, 0x3D, 0xEF, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xAE, 0xFB, 0xFF, 0xFF, 0x3D, 0x09, 0x02, 0x00, 0x00, 0x0F, 0x84, 0xA3, 0xFB, 0xFF, 0xFF, 0x3D, 0xAC, 0x02, 0x00, 0x00, 0x0F, 0x84, 0x98, 0xFB, 0xFF, 0xFF, 0x3D, 0xE0, 0x04, 0x00, 0x00, 0x0F, 0x84, 0x8D, 0xFB, 0xFF, 0xFF, 0x3D, 0x33, 0x05, 0x00, 0x00, 0x0F, 0x84, 0x82, 0xFB, 0xFF, 0xFF, 0x3D, 0xAE, 0x05, 0x00, 0x00, 0x0F, 0x84, 0x77, 0xFB, 0xFF, 0xFF, 0x3D, 0x01, 0x06, 0x00, 0x00, 0x0F, 0x84, 0x6C, 0xFB, 0xFF, 0xFF, 0x3D, 0x66, 0x08, 0x00, 0x00, 0x0F, 0x84, 0x61, 0xFB, 0xFF, 0xFF, 0x83, 0xF8, 0x1C, 0x0F, 0x84, 0x58, 0xFB, 0xFF, 0xFF, 0x83, 0xF8, 0x6E, 0x0F, 0x84, 0x4F, 0xFB, 0xFF, 0xFF, 0x83, 0xF8, 0x7E, 0x0F, 0x84, 0x46, 0xFB, 0xFF, 0xFF, 0x3D, 0xB4, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x3B, 0xFB, 0xFF, 0xFF, 0x3D, 0xC2, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x30, 0xFB, 0xFF, 0xFF, 0x3D, 0xF7, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x25, 0xFB, 0xFF, 0xFF, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x1A, 0xFB, 0xFF, 0xFF, 0x3D, 0x10, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x0F, 0xFB, 0xFF, 0xFF, 0x3D, 0x29, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x04, 0xFB, 0xFF, 0xFF, 0x3D, 0x2E, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xF9, 0xFA, 0xFF, 0xFF, 0x3D, 0x5D, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xEE, 0xFA, 0xFF, 0xFF, 0x3D, 0x74, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xE3, 0xFA, 0xFF, 0xFF, 0x3D, 0xB8, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xD8, 0xFA, 0xFF, 0xFF, 0x3D, 0xF2, 0x01, 0x00, 0x00, 0x0F, 0x84, 0xCD, 0xFA, 0xFF, 0xFF, 0x3D, 0x9D, 0x02, 0x00, 0x00, 0x0F, 0x84, 0xC2, 0xFA, 0xFF, 0xFF, 0x3D, 0xD2, 0x02, 0x00, 0x00, 0x0F, 0x84, 0xB7, 0xFA, 0xFF, 0xFF, 0x3D, 0xC0, 0x05, 0x00, 0x00, 0x0F, 0x84, 0xAC, 0xFA, 0xFF, 0xFF, 0x83, 0xF8, 0x42, 0x0F, 0x84, 0xA3, 0xFA, 0xFF, 0xFF, 0x83, 0xF8, 0x66, 0x0F, 0x84, 0x9A, 0xFA, 0xFF, 0xFF, 0x83, 0xF8, 0x68, 0x0F, 0x84, 0x91, 0xFA, 0xFF, 0xFF, 0x3D, 0xC9, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x86, 0xFA, 0xFF, 0xFF, 0x3D, 0xA4, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x7B, 0xFA, 0xFF, 0xFF, 0x3D, 0xE4, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x70, 0xFA, 0xFF, 0xFF, 0x3D, 0x0F, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x65, 0xFA, 0xFF, 0xFF, 0x3D, 0x3A, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x5A, 0xFA, 0xFF, 0xFF, 0x3D, 0x96, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x4F, 0xFA, 0xFF, 0xFF, 0x3D, 0xA6, 0x01, 0x00, 0x00, 0x0F, 0x84, 0x44, 0xFA, 0xFF, 0xFF, 0x3D, 0xAA, 0x02, 0x00, 0x00, 0x0F, 0x84, 0x39, 0xFA, 0xFF, 0xFF, 0xE9, 0x3E, 0xFA, 0xFF, 0xFF };


clientSock::clientSock(string host, unsigned int port) {
    connect(host, port);
}

clientSock::clientSock() {
    connected = false;
}

clientSock::clientSock(int sock) {
    sockfd = sock;
    connected = true;
}

clientSock::~clientSock() {
    //disconnect();
}

int clientSock::connect(string host, unsigned int port) {
    clientSock::host = host;
    clientSock::port = port;

    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    server = gethostbyname(host.data());
    bcopy((char*) server->h_addr, (char*) &servaddr.sin_addr.s_addr, server->h_length);
    servaddr.sin_port = htons(port);

    if(connected)
        disconnect();

    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    /*struct timeval tv;
    tv.tv_sec = 5;//5 Secs Timeout
    tv.tv_usec = 0;//Not init'ing this can cause strange errors
    setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (char*)&tv, sizeof(struct timeval));*/

    enable_keepalive(sockfd);

    for(size_t i = 0; i < 3; i++) { //try to connect 3 times
        if(::connect(sockfd, (struct sockaddr*) &servaddr, sizeof(servaddr)) < 0)
            cerr << "Error on connecting: " << errno << "  " << strerror(errno) << endl;
        else {
            connected = true;
            return 0;
        }
    }

    connected = false;
    return 1;
}

bool clientSock::hasError() {
    if(sockfd == -1)
        return true;

    int error = 0;
    socklen_t len = sizeof(error);
    int retval = getsockopt(sockfd, SOL_SOCKET, SO_ERROR, &error, &len);

    if(retval != 0 || error != 0)
        return true;
    else
        return false;
}

int clientSock::enable_keepalive(int sock) {
    int yes = 1;

    if(setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &yes, sizeof(int)) == -1)
        return -1;

    int idle = 1;

    if(setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &idle, sizeof(int)) == -1)
        return -1;

    int interval = 1;

    if(setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &interval, sizeof(int)) == -1)
        return -1;

    int maxpkt = 10;

    if(setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &maxpkt, sizeof(int)) == -1)
        return -1;

    return 0;
}

int clientSock::disconnect() {
    if(!connected)
        return -1;

    close(sockfd);
    connected = false;

    return 0;
}

int clientSock::write(string mesg) {
    if(!connected)
        return 1;

    struct timeval tv;
    tv.tv_sec = 10;
    tv.tv_usec = 0;
    fd_set writefds;
    FD_ZERO(&writefds);
    FD_SET(sockfd, &writefds);

    //cout << "w: " << mesg << endl;

    int sentBytes = 0;

    for(size_t i = 0; i < mesg.length(); i += sentBytes) {
        FD_ZERO(&writefds);
        FD_SET(sockfd, &writefds);
        int rv = select(sockfd + 1, NULL, &writefds, NULL, &tv);

        if(rv == -1)
            cerr << errno << "  " << strerror(errno) << endl;
        else if(rv == 0)
            sentBytes = 0;
        else if(rv > 0 && FD_ISSET(sockfd, &writefds)) {
            sentBytes = ::write(sockfd, mesg.substr(i, mesg.length() - i).c_str(), mesg.length() - i);

            if(sentBytes == -1) {
                cerr << "Error sending IDs: " << errno << "  " << strerror(errno) << endl;
                return 1;
            }
        }
    }

    return 0;
}

string clientSock::read() {
    if(!connected)
        return "";

    struct timeval tv;
    tv.tv_sec = 10;
    tv.tv_usec = 0;
    fd_set readfds;
    FD_ZERO(&readfds);
    FD_SET(sockfd, &readfds);

    string resp = "";
    unsigned int n = 0;


    do {
        FD_ZERO(&readfds);
        FD_SET(sockfd, &readfds);
        int rv = select(sockfd + 1, &readfds, NULL, NULL, &tv);

        if(rv <= -1)
            cerr << errno << "  " << strerror(errno) << endl;
        else if(rv == 0)
            break;
        else if(rv > 0 && FD_ISSET(sockfd, &readfds)) {

            int tn = ::read(sockfd, recv, buffSize - 1);//avoid signcompare warning

            if(tn > 0) {
                n = tn;
                recv[n] = '\0';
                string tResp(recv, n);
                resp += tResp;
            }
            else if(tn == -1) {
                if(errno == 11) { //get the good part of the received stuff also if the connection closed during receive -> happens sometimes with short messages
                    string tResp(recv);

                    if(tResp.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890") == std::string::npos) //but only allow valid chars
                        resp += tResp;
                }
                else
                    cerr << errno << "  " << strerror(errno) << endl;

                break;
            }
            else
                break;

        }
        else
            cerr << "ERROR: rv: " << rv << endl;

    }
    while(n >= buffSize - 1);

    //if(resp != "")
    //cout << "r: " << resp << endl;

    return resp;
}

string clientSock::readAll() {
    string full = read();

    while(full.find("END") == string::npos)
        full += read();

    full = full.substr(0, full.find("END"));

    return full;
}
